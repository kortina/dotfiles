{
  // "vscodeMarkdownNotes.workspaceFilenameConvention": "relativePaths",
  "cSpell.enableFiletypes": [
    "markdown",
    "plaintext"
  ],
  "diffEditor.renderIndicators": true,
  // "docker-linter.rubocop.enable": true,
  "editor.formatOnSave": true,
  "editor.codeLens": false,
  "[ruby]": {
    "editor.formatOnSave": true
  },
  "editor.minimap.enabled": false,
  "editor.quickSuggestionsDelay": 1,
  // during dev show quick suggestions for markdown without ctrl+p
  "[markdown]": {
    "editor.quickSuggestions": true,
    "editor.tabSize": 2,
    // "editor.wordSeparators": "`~!@$%^&*()=+[{]}\\|;:'\",.<>/?", // remove '#' so tags can be searched. Does not seem to be working....
  },
  "editor.acceptSuggestionOnEnter": "off",
  "editor.wordWrap": "on",
  "explorer.autoReveal": false,
  "files.autoSave": "off",
  "editor.codeActionsOnSave": {
    "source.fixAll.eslint": true
  },
  // "[javascript]": {
  //   "editor.formatOnSave": false
  // },
  // "eslint.options": {
  //   "rules": {
  //     "quotes": [
  //       "error",
  //       "single"
  //     ]
  //   },
  // },
  // "gitlens.codeLens.enabled": false,
  "gutterpreview.imagePreviewMaxHeight": 200,
  "prettier.jsxBracketSameLine": true,
  "prettier.printWidth": 100,
  "prettier.singleQuote": true,
  "prettier.trailingComma": "es5",
  "python.formatting.provider": "black",
  "python.linting.flake8Enabled": true,
  // "python.linting.mypyEnabled": true,
  "python.linting.pylintEnabled": false,
  "python.pythonPath": "~/.pyenv/shims/python",
  "ruby.linter.run": "onSave",
  "runInTerminal.commands": [
    // exec any file as a binary
    {
      "cmd": "${relativeFile}",
      "match": ".*",
      "name": "exec-file"
    },
    //////////////////////
    // ruby
    //////////////////////
    // rspec: test line
    {
      "cmd": "./bin/rspec ${relativeFile}:${line}",
      "match": "_spec\\.rb$",
      "name": "l"
    },
    // rspec: test buffer
    {
      "cmd": "./bin/rspec ${relativeFile}",
      "match": "_spec\\.rb$",
      "name": "b"
    },
    // rspec: test suite
    {
      "cmd": "./bin/rspec",
      "match": "_spec\\.rb$",
      "name": "s"
    },
    //////////////////////
    // python
    //////////////////////
    // nose: test line
    {
      "cmd": "noseline ${relativeFile} --line=${line}",
      "match": "\\.py$",
      "name": "l"
    },
    // nose: test buffer
    {
      "cmd": "nosetests ${relativeFile}",
      "match": "\\.py$",
      "name": "b"
    }
  ],
  "terminal.integrated.cursorBlinking": true,
  "terminal.integrated.cursorStyle": "block",
  // "vim.disableAnnoyingNeovimMessage": true,
  "vim.handleKeys": {
    "<C-a>": false,
    "<C-p>": false
  },
  "vim.hlsearch": true,
  "vim.leader": ",",
  "vim.insertModeKeyBindings": [
    // insert the current date, insert mode
    {
      "before": [
        "<C-d>"
      ],
      "after": [],
      "commands": [
        {
          "command": "editor.action.insertSnippet",
          "args": {
            "snippet": "$CURRENT_YEAR-$CURRENT_MONTH-$CURRENT_DATE"
          }
        }
      ]
    }
  ], // END insert mode commands
  "vim.normalModeKeyBindingsNonRecursive": [
    {
      "after": [],
      "before": [
        "g",
        "l"
      ],
      "commands": [
        {
          "args": [],
          "command": "editor.action.openLink"
        }
      ]
    },
    {
      "after": [],
      "before": [
        "<leader>",
        "e"
      ],
      "commands": [
        {
          "args": [],
          "command": "editor.action.marker.next"
        }
      ]
    },
    // clear search buffer
    {
      "after": [],
      "before": [
        "<leader>",
        "/"
      ],
      "commands": [
        ":nohl"
      ]
    },
    // copy everything in buffer to clipboard
    {
      "after": [
        "g",
        "g",
        "V",
        "G",
        "\"",
        "*",
        "y"
      ],
      "before": [
        "<leader>",
        "c"
      ],
      "commands": []
    },
    {
      "after": [],
      "before": [
        "<leader>",
        "r",
        "a"
      ],
      "commands": [
        {
          "command": "runInTerminal.runLast"
        }
      ]
    },
    {
      "after": [],
      "before": [
        "<leader>",
        "r",
        "l"
      ],
      "commands": [
        {
          "args": {
            "name": "l"
          },
          "command": "runInTerminal.run"
        }
      ]
    },
    {
      "after": [],
      "before": [
        "<leader>",
        "r",
        "b"
      ],
      "commands": [
        {
          "args": {
            "name": "b"
          },
          "command": "runInTerminal.run"
        }
      ]
    },
    {
      "after": [],
      "before": [
        "<leader>",
        "r",
        "s"
      ],
      "commands": [
        {
          "args": {
            "name": "s"
          },
          "command": "runInTerminal.run"
        }
      ]
    },
    {
      "after": [],
      "before": [
        "<leader>",
        "a"
      ],
      "commands": [
        {
          "command": "editor.action.marker.nextInFiles"
        }
      ]
    },
    {
      "after": [],
      "before": [
        "<leader>",
        "x"
      ],
      "commands": [
        {
          "args": {
            "name": "exec-file"
          },
          "command": "runInTerminal.run"
        }
      ]
    },
    // insert the current date as markdown header, normal mode
    {
      "before": [
        "<leader>",
        "d"
      ],
      "after": [],
      "commands": [
        {
          "command": "editor.action.insertSnippet",
          "args": {
            "snippet": "\n# $CURRENT_YEAR-$CURRENT_MONTH-$CURRENT_DATE\n\n"
          }
        }
      ]
    },
    // insert a (roughly) title cased version of the filename
    // eg, for `some-file.md`, "Some File"
    {
      "before": [
        ",",
        "f",
        "f"
      ],
      "after": [],
      "commands": [
        {
          "command": "editor.action.insertSnippet",
          "args": {
            "snippet": "${TM_FILENAME_BASE/([A-Za-z]+)([-_]*)/${1:/capitalize}${2:+ }/g}"
          }
        }
      ]
    },
    // open quickfix z=
    {
      "after": [],
      "before": [
        "z",
        "="
      ],
      "commands": [
        {
          "args": [],
          "command": "editor.action.quickFix"
        }
      ]
    }
  ], // END normal mode commands
  "window.zoomLevel": 0,
  "window.title": "${activeEditorMedium}${separator}${rootName}",
  "workbench.activityBar.visible": false,
  "workbench.colorCustomizations": {
    "editor.lineHighlightBorder": "#444444",
    "editorCursor.foreground": "#f44271",
    "tab.activeForeground": "#ffffff",
    "tab.activeBorderTop": "#f44271",
    "tab.unfocusedActiveBorderTop": "#444444",
    "tab.unfocusedActiveForeground": "#555555",
    "terminalCursor.foreground": "#f44271",
    "statusBar.background": "#202225"
  },
  "workbench.editor.enablePreviewFromQuickOpen": false,
  "workbench.startupEditor": "newUntitledFile",
  "workbench.statusBar.visible": true,
  "zenMode.hideStatusBar": false,
  "workbench.colorTheme": "Tomorrow Night",
  "editor.tokenColorCustomizations": {
    "[Tomorrow Night]": {
      "textMateRules": [
        {
          "scope": "markup.quote.markdown",
          "settings": {
            "foreground": "#666"
          }
        },
        {
          "scope": "markup.inline.raw",
          "settings": {
            "foreground": "#f19999"
          }
        },
        {
          "scope": "markup.italic.markdown",
          "settings": {
            "fontStyle": "italic"
          }
        },
        {
          "scope": "punctuation.definition.italic.markdown",
          "settings": {
            "foreground": "#555"
          }
        },
        {
          "scope": "markup.bold.markdown",
          "settings": {
            "fontStyle": "bold",
            "foreground": "#efefef"
          }
        },
        {
          "scope": "punctuation.definition.bold.markdown",
          "settings": {
            "foreground": "#555"
          }
        }
      ]
    }
  },
  "explorer.confirmDelete": false,
  "editor.fontFamily": "Monaco, Menlo, Consolas, 'Courier New', monospace",
  "cSpell.userWords": [
    "Kortina",
    "Sundance",
    "Tarkovsky",
    "autoplay",
    "endfor",
    "venmo"
  ],
  "[typescript]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  }
}