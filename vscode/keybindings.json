// Place your key bindings in this file to overwrite the defaults
[
  // use ctrl+enter to accept selected suggestion
  // {
  //   "key": "ctrl+enter",
  //   "command": "acceptSelectedSuggestion"
  // },
  // {
  //   "key": "enter",
  //   "command": "-acceptSelectedSuggestion",
  //   "when": "acceptSuggestionOnEnter && suggestWidgetVisible && suggestionMakesTextEdit && textInputFocus"
  // },
  {
    "key": "ctrl+p",
    "command": "editor.action.triggerSuggest",
    "when": "editorFocus && !suggestWidgetVisible"
  },
  {
    "key": "ctrl+a ctrl+o",
    "command": "workbench.action.toggleMaximizedPanel"
  },
  // Move focus in editor to right
  {
    "key": "ctrl+l",
    "command": "workbench.action.focusNextGroup",
    "when": "editorFocus"
  },
  // Move focus in editor to left
  {
    "key": "ctrl+h",
    "command": "workbench.action.focusPreviousGroup",
    "when": "editorFocus"
  },
  // Move focus from editor left to explorer
  {
    "key": "ctrl+shift+h",
    "command": "workbench.view.explorer",
    "when": "!explorerViewletFocus"
  },
  // Move focus from explore right to editor:
  {
    "key": "ctrl+shift+l",
    "command": "workbench.action.focusActiveEditorGroup",
    "when": "!(editorFocus || terminalFocus)" // WAS PREVIOUSLY: explorerViewletFocus || filesExplorerFocus || sidebarFocus || focusedView == 'workbench.view.search' ||
  },
  // Move focus down to the terminal:
  {
    "key": "ctrl+shift+j",
    "command": "workbench.action.terminal.focus",
    "when": "editorFocus"
  },
  // Move focus up to editor:
  {
    "key": "ctrl+shift+k",
    "command": "workbench.action.focusActiveEditorGroup",
    "when": "terminalFocus"
  },
  // Create a new terminal tab:
  {
    "key": "cmd+t",
    "command": "workbench.action.terminal.new",
    "when": "terminalFocus"
  },
  // Kill terminal tab:
  {
    "key": "cmd+w",
    "command": "workbench.action.terminal.kill",
    "when": "terminalFocus"
  },
  // Next terminal tab:
  {
    "key": "cmd+shift+]",
    "command": "workbench.action.terminal.focusNext",
    "when": "terminalFocus"
  },
  // Previous terminal tab:
  {
    "key": "cmd+shift+[",
    "command": "workbench.action.terminal.focusPrevious",
    "when": "terminalFocus"
  },
  // Exec bash script with runInTerminal
  {
    "key": "ctrl+e",
    "command": "runInTerminal.run",
    "args": {
      "cmd": "/usr/bin/env bash ${relativeFile}",
      "match": ".*"
    },
    "when": "resourceLangId == shellscript"
  },
  // navigate search results with alt j/k
  {
    "key": "alt+j",
    "command": "goToNextReferenceFromEmbeddedEditor",
    "when": "inReferenceSearchEditor"
  },
  {
    "key": "alt+k",
    "command": "goToPreviousReferenceFromEmbeddedEditor",
    "when": "inReferenceSearchEditor"
  },
  {
    "key": "alt+j",
    "command": "search.action.focusNextSearchResult",
    "when": "hasSearchResult"
  },
  {
    "key": "alt+k",
    "command": "search.action.focusPreviousSearchResult",
    "when": "hasSearchResult"
  },
  {
    "key": "alt+j",
    "command": "goToNextReference",
    "when": "referenceSearchVisible"
  },
  {
    "key": "alt+k",
    "command": "goToPreviousReference",
    "when": "referenceSearchVisible"
  },
  {
    "key": "cmd+k cmd+k",
    "command": "editor.action.peekDefinition"
  },
  {
    "key": "cmd+k cmd+o",
    "command": "editor.action.inspectTMScopes"
  },
  {
    "key": "alt+shift+n",
    "command": "vscodeMarkdownNotes.newNote"
  },
  // example of running a task with a keyboard shortcut
  {
    "key": "alt+t",
    "command": "workbench.action.tasks.runTask",
    "args": "echo"
  },
  {
    "key": "alt+j",
    "command": "workbench.action.tasks.runTask",
    "args": "Open Journal",
    "when": "!inReferenceSearchEditor && !hasSearchResult"
  },
  // cmd+b, the default, is the built in shortcut to
  // Hide / Show Side Bar, so release extension binding:
  {
    "key": "cmd+alt+b",
    "command": "markdown.extension.editing.toggleBold"
  },
  {
    "key": "cmd+b",
    "command": "workbench.action.toggleSidebarVisibility"
  },
  {
    "key": "cmd+k cmd+n",
    "command": "editor.action.referenceSearch.trigger"
  },
  {
    "key": "cmd+k cmd+f",
    "command": "references-view.find",
    "when": "editorHasReferenceProvider"
  },
  {
    "key": "cmd+k cmd+k",
    "when": "terminalFocus",
    "command": "workbench.action.terminal.clear"
  },
  {
    "key": "ctrl+i",
    "command": "workbench.action.navigateForward",
    "when": "canNavigateForward"
  },
  {
    "key": "ctrl+shift+-",
    "command": "-workbench.action.navigateForward",
    "when": "canNavigateForward"
  },
  {
    "key": "ctrl+o",
    "command": "workbench.action.navigateBack",
    "when": "canNavigateBack"
  },
  {
    "key": "ctrl+-",
    "command": "-workbench.action.navigateBack",
    "when": "canNavigateBack"
  },
  // {
  //   "key": "cmd+k cmd+r",
  //   "command": "-workbench.action.keybindingsReference"
  // },
  // {
  //   "key": "shift+alt+f12",
  //   "command": "-references-view.find",
  //   "when": "editorHasReferenceProvider"
  // }
  // { "key": "alt+j",         "command": "references-view.next",                      "when": "reference-list.hasResult" },
  // { "key": "alt+k",   "command": "references-view.prev",                      "when": "reference-list.hasResult" },
]
